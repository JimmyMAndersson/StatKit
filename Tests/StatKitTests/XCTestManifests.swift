#if !canImport(ObjectiveC)
import XCTest

extension AveragesTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__AveragesTests = [
        ("testBigNumberIntegerArithmeticMean", testBigNumberIntegerArithmeticMean),
        ("testDoubleSetMode", testDoubleSetMode),
        ("testEmptySetArithmeticMean", testEmptySetArithmeticMean),
        ("testEmptySetGeometricMean", testEmptySetGeometricMean),
        ("testEmptySetHarmonicMean", testEmptySetHarmonicMean),
        ("testEmptySetMedian", testEmptySetMedian),
        ("testEmptyStringMode", testEmptyStringMode),
        ("testEvenCountHighMedian", testEvenCountHighMedian),
        ("testEvenCountLowMedian", testEvenCountLowMedian),
        ("testEvenCountMeanMedian", testEvenCountMeanMedian),
        ("testFloatingPointArithmeticMean", testFloatingPointArithmeticMean),
        ("testFloatingPointGeometricMean", testFloatingPointGeometricMean),
        ("testFloatingPointGHarmonicMean", testFloatingPointGHarmonicMean),
        ("testFloatingPointMedian", testFloatingPointMedian),
        ("testIntArrayMode", testIntArrayMode),
        ("testIntegerArithmeticMean", testIntegerArithmeticMean),
        ("testIntegerGeometricMean", testIntegerGeometricMean),
        ("testIntegerHarmonicMean", testIntegerHarmonicMean),
        ("testObjectArithmeticMean", testObjectArithmeticMean),
        ("testObjectGeometricMean", testObjectGeometricMean),
        ("testObjectHarmonicMean", testObjectHarmonicMean),
        ("testOddCountHighMedian", testOddCountHighMedian),
        ("testOddCountLowMedian", testOddCountLowMedian),
        ("testOddCountMeanMedian", testOddCountMeanMedian),
        ("testStringMode", testStringMode),
    ]
}

extension BinomialCoefficientTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__BinomialCoefficientTests = [
        ("testNegativeInput", testNegativeInput),
        ("testNonNegativeInput", testNonNegativeInput),
    ]
}

extension BinomialDistributionTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__BinomialDistributionTests = [
        ("testCDF", testCDF),
        ("testExcessKurtosis", testExcessKurtosis),
        ("testKurtosis", testKurtosis),
        ("testMean", testMean),
        ("testSampling", testSampling),
        ("testSkewness", testSkewness),
        ("testVariance", testVariance),
    ]
}

extension ContinuousUniformDistributionTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ContinuousUniformDistributionTests = [
        ("testCDF", testCDF),
        ("testExcessKurtosis", testExcessKurtosis),
        ("testKurtosis", testKurtosis),
        ("testMean", testMean),
        ("testSampling", testSampling),
        ("testSkewness", testSkewness),
        ("testVariance", testVariance),
    ]
}

extension CovarianceTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__CovarianceTests = [
        ("testPopulationCovarianceCommutativity", testPopulationCovarianceCommutativity),
        ("testPopulationCovarianceWithSingleVariable", testPopulationCovarianceWithSingleVariable),
        ("testSampleCovariancecommutativity", testSampleCovariancecommutativity),
        ("testSampleCovarianceWithSingleVariable", testSampleCovarianceWithSingleVariable),
        ("testSIMD2NegativePopulationCovariance", testSIMD2NegativePopulationCovariance),
        ("testSIMD2NegativeSampleCovariance", testSIMD2NegativeSampleCovariance),
        ("testSIMD2PopulationCovariancePerformance", testSIMD2PopulationCovariancePerformance),
        ("testSIMD2PositivePopulationCovariance", testSIMD2PositivePopulationCovariance),
        ("testSIMD2PositiveSampleCovariance", testSIMD2PositiveSampleCovariance),
        ("testSIMD2SampleCovariancePerformance", testSIMD2SampleCovariancePerformance),
    ]
}

extension DenseRankingTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__DenseRankingTests = [
        ("testDistinctDataSetByAscendingOrder", testDistinctDataSetByAscendingOrder),
        ("testDistinctDataSetByDescendingOrder", testDistinctDataSetByDescendingOrder),
        ("testEmptyDataSet", testEmptyDataSet),
        ("testIndistinctDataSetByAscendingOrder", testIndistinctDataSetByAscendingOrder),
        ("testIndistinctDataSetByDescendingOrder", testIndistinctDataSetByDescendingOrder),
    ]
}

extension ExponentialDistributionTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ExponentialDistributionTests = [
        ("testCDF", testCDF),
        ("testExcessKurtosis", testExcessKurtosis),
        ("testKurtosis", testKurtosis),
        ("testMean", testMean),
        ("testSampling", testSampling),
        ("testSkewness", testSkewness),
        ("testVariance", testVariance),
    ]
}

extension FactorialTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__FactorialTests = [
        ("testNonNegativeFactorial", testNonNegativeFactorial),
    ]
}

extension FractionalRankingTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__FractionalRankingTests = [
        ("testDistinctDataSetByAscendingOrder", testDistinctDataSetByAscendingOrder),
        ("testDistinctDataSetByDescendingOrder", testDistinctDataSetByDescendingOrder),
        ("testEmptyDataSet", testEmptyDataSet),
        ("testIndistinctDataSetByAscendingOrder", testIndistinctDataSetByAscendingOrder),
        ("testIndistinctDataSetByDescendingOrder", testIndistinctDataSetByDescendingOrder),
    ]
}

extension GausErrorFunctionTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__GausErrorFunctionTests = [
        ("testNegativeInputs", testNegativeInputs),
        ("testNonNegativeInputs", testNonNegativeInputs),
    ]
}

extension LinearCorrelationTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__LinearCorrelationTests = [
        ("testPearsonConstantValueArray", testPearsonConstantValueArray),
        ("testPearsonCorrelationWithEmptyCollection", testPearsonCorrelationWithEmptyCollection),
        ("testPearsonCorrelationWithSingleVariable", testPearsonCorrelationWithSingleVariable),
        ("testPopulationPearsonCorrelation", testPopulationPearsonCorrelation),
        ("testSamplePearsonCorrelation", testSamplePearsonCorrelation),
    ]
}

extension ModifiedCompetitionRankingTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ModifiedCompetitionRankingTests = [
        ("testDistinctDataSetByAscendingOrder", testDistinctDataSetByAscendingOrder),
        ("testDistinctDataSetByDescendingOrder", testDistinctDataSetByDescendingOrder),
        ("testEmptyDataSet", testEmptyDataSet),
        ("testIndistinctDataSetByAscendingOrder", testIndistinctDataSetByAscendingOrder),
        ("testIndistinctDataSetByDescendingOrder", testIndistinctDataSetByDescendingOrder),
    ]
}

extension NormalDistributionTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__NormalDistributionTests = [
        ("testCDF", testCDF),
        ("testExcessKurtosis", testExcessKurtosis),
        ("testKurtosis", testKurtosis),
        ("testMean", testMean),
        ("testPDF", testPDF),
        ("testSampling", testSampling),
        ("testSkewness", testSkewness),
        ("testVariance", testVariance),
    ]
}

extension OrdinalRankingTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__OrdinalRankingTests = [
        ("testDistinctDataSetByAscendingOrder", testDistinctDataSetByAscendingOrder),
        ("testDistinctDataSetByDescendingOrder", testDistinctDataSetByDescendingOrder),
        ("testEmptyDataSet", testEmptyDataSet),
        ("testIndistinctDataSetByAscendingOrder", testIndistinctDataSetByAscendingOrder),
        ("testIndistinctDataSetByDescendingOrder", testIndistinctDataSetByDescendingOrder),
    ]
}

extension PoissonDistributionTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__PoissonDistributionTests = [
        ("testCDF", testCDF),
        ("testExcessKurtosis", testExcessKurtosis),
        ("testKurtosis", testKurtosis),
        ("testMean", testMean),
        ("testSampling", testSampling),
        ("testSkewness", testSkewness),
        ("testVariance", testVariance),
    ]
}

extension QuantileTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__QuantileTests = [
        ("testEmptySequenceQuantile", testEmptySequenceQuantile),
        ("testEvenCountAveragedInverseEmpiricalCDF", testEvenCountAveragedInverseEmpiricalCDF),
        ("testEvenCountClosestOrOddIndexed", testEvenCountClosestOrOddIndexed),
        ("testEvenCountInverseEmpiricalCDF", testEvenCountInverseEmpiricalCDF),
        ("testEvenCountLerpInverseEmpiricalCDF", testEvenCountLerpInverseEmpiricalCDF),
        ("testMaxQuantile", testMaxQuantile),
        ("testMinQuantile", testMinQuantile),
        ("testOddCountAveragedInverseEmpiricalCDF", testOddCountAveragedInverseEmpiricalCDF),
        ("testOddCountClosestOrOddIndexed", testOddCountClosestOrOddIndexed),
        ("testOddCountInverseEmpiricalCDF", testOddCountInverseEmpiricalCDF),
        ("testOddCountLerpInverseEmpiricalCDF", testOddCountLerpInverseEmpiricalCDF),
    ]
}

extension RangeTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__RangeTests = [
        ("testEmptyArrayRange", testEmptyArrayRange),
        ("testFloatingPointArrayRange", testFloatingPointArrayRange),
        ("testIntegerArrayRange", testIntegerArrayRange),
        ("testObjectArrayRange", testObjectArrayRange),
    ]
}

extension RankCorrelationTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__RankCorrelationTests = [
        ("testKendallsTauBWithSingleEntryCollection", testKendallsTauBWithSingleEntryCollection),
        ("testKendallsTauWithEmptyCollection", testKendallsTauWithEmptyCollection),
        ("testKendallsTauWithSingleVariable", testKendallsTauWithSingleVariable),
        ("testPearsonCorrelationWithEmptyCollection", testPearsonCorrelationWithEmptyCollection),
        ("testPearsonCorrelationWithSingleEntryCollection", testPearsonCorrelationWithSingleEntryCollection),
        ("testPearsonCorrelationWithSingleVariable", testPearsonCorrelationWithSingleVariable),
        ("testPopulationKendallsTau", testPopulationKendallsTau),
        ("testPopulationKendallsTauWithTies", testPopulationKendallsTauWithTies),
        ("testPopulationSpearmanAssociation", testPopulationSpearmanAssociation),
        ("testSampleKendallsTau", testSampleKendallsTau),
        ("testSampleKendallsTauWithAllTies", testSampleKendallsTauWithAllTies),
        ("testSampleKendallsTauWithTies", testSampleKendallsTauWithTies),
        ("testSampleSpearmanAssociation", testSampleSpearmanAssociation),
    ]
}

extension StandardCompetitionRankingTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__StandardCompetitionRankingTests = [
        ("testDistinctDataSetByAscendingOrder", testDistinctDataSetByAscendingOrder),
        ("testDistinctDataSetByDescendingOrder", testDistinctDataSetByDescendingOrder),
        ("testEmptyDataSet", testEmptyDataSet),
        ("testIndistinctDataSetByAscendingOrder", testIndistinctDataSetByAscendingOrder),
        ("testIndistinctDataSetByDescendingOrder", testIndistinctDataSetByDescendingOrder),
    ]
}

extension SummationTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__SummationTests = [
        ("testNegativeSum", testNegativeSum),
        ("testPositiveSum", testPositiveSum),
    ]
}

extension VariabilityTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__VariabilityTests = [
        ("testEmptySetSampleStandardDeviation", testEmptySetSampleStandardDeviation),
        ("testEmptySetSampleVariance", testEmptySetSampleVariance),
        ("testFloatingPointPopulationStandardDeviation", testFloatingPointPopulationStandardDeviation),
        ("testFloatingPointPopulationVariance", testFloatingPointPopulationVariance),
        ("testFloatingPointSampleStandardDeviation", testFloatingPointSampleStandardDeviation),
        ("testFloatingPointSampleVariance", testFloatingPointSampleVariance),
        ("testIntegerPopulationStandardDeviation", testIntegerPopulationStandardDeviation),
        ("testIntegerPopulationVariance", testIntegerPopulationVariance),
        ("testIntegerSampleStandardDeviation", testIntegerSampleStandardDeviation),
        ("testIntegerSampleVariance", testIntegerSampleVariance),
        ("testSingleEntrySetSampleStandardDeviation", testSingleEntrySetSampleStandardDeviation),
        ("testSingleEntrySetSampleVariance", testSingleEntrySetSampleVariance),
    ]
}

public func __allTests() -> [XCTestCaseEntry] {
    return [
        testCase(AveragesTests.__allTests__AveragesTests),
        testCase(BinomialCoefficientTests.__allTests__BinomialCoefficientTests),
        testCase(BinomialDistributionTests.__allTests__BinomialDistributionTests),
        testCase(ContinuousUniformDistributionTests.__allTests__ContinuousUniformDistributionTests),
        testCase(CovarianceTests.__allTests__CovarianceTests),
        testCase(DenseRankingTests.__allTests__DenseRankingTests),
        testCase(ExponentialDistributionTests.__allTests__ExponentialDistributionTests),
        testCase(FactorialTests.__allTests__FactorialTests),
        testCase(FractionalRankingTests.__allTests__FractionalRankingTests),
        testCase(GausErrorFunctionTests.__allTests__GausErrorFunctionTests),
        testCase(LinearCorrelationTests.__allTests__LinearCorrelationTests),
        testCase(ModifiedCompetitionRankingTests.__allTests__ModifiedCompetitionRankingTests),
        testCase(NormalDistributionTests.__allTests__NormalDistributionTests),
        testCase(OrdinalRankingTests.__allTests__OrdinalRankingTests),
        testCase(PoissonDistributionTests.__allTests__PoissonDistributionTests),
        testCase(QuantileTests.__allTests__QuantileTests),
        testCase(RangeTests.__allTests__RangeTests),
        testCase(RankCorrelationTests.__allTests__RankCorrelationTests),
        testCase(StandardCompetitionRankingTests.__allTests__StandardCompetitionRankingTests),
        testCase(SummationTests.__allTests__SummationTests),
        testCase(VariabilityTests.__allTests__VariabilityTests),
    ]
}
#endif
